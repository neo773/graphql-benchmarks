import { execSync } from "child_process";
import fs from "fs";
import path from "path";
import { queries, servers as serverNames } from "./config";
import { average, formatNumber } from "./utils";
import { markdownTable } from "markdown-table";

const servers = Object.keys(serverNames);

const avgReqSecs: { [s: string]: number } = {};
const avgLatencies: { [s: string]: number } = {};

const processResultFiles = (resultFiles: string[]) => {
  servers.forEach((server, idx) => {
    const startIdx = idx * 3;
    const reqSecVals: number[] = [];
    const latencyVals: number[] = [];

    for (let j = 0; j < 3; j++) {
      const fileIdx = startIdx + j;
      const jsonData = JSON.parse(
        fs.readFileSync(resultFiles[fileIdx], "utf8")
      );
      reqSecVals.push(jsonData.summary.requestsPerSec);
      latencyVals.push(jsonData.summary.average * 1000);
    }

    avgReqSecs[server] = average(reqSecVals);
    avgLatencies[server] = average(latencyVals);
  });
};

const generateGnuplotDataFiles = (): {
  reqSecData: string;
  latencyData: string;
} => {
  const reqSecData = "/tmp/reqSec.dat";
  const latencyData = "/tmp/latency.dat";

  fs.writeFileSync(reqSecData, "Server Value\n");
  fs.writeFileSync(latencyData, "Server Value\n");

  servers.forEach((server) => {
    fs.appendFileSync(reqSecData, `${server} ${avgReqSecs[server]}\n`);
    fs.appendFileSync(latencyData, `${server} ${avgLatencies[server]}\n`);
  });

  return { reqSecData, latencyData };
};

const generateGnuplotScript = (
  reqSecData: string,
  latencyData: string,
  whichBench: number
): { reqSecHistogramFile: string; latencyHistogramFile: string } => {
  const reqSecHistogramFile = `req_sec_histogram${whichBench}.png`;
  const latencyHistogramFile = `latency_histogram${whichBench}.png`;

  const gnuplotScript = `
    set term pngcairo size 1280,720 enhanced font "Courier,12"
    set output "${reqSecHistogramFile}"
    set style data histograms
    set style histogram cluster gap 1
    set style fill solid border -1
    set xtics rotate by -45
    set boxwidth 0.9
    set title "Requests/Sec"
    stats "${reqSecData}" using 2 nooutput
    set yrange [0:STATS_max*1.2]
    set key outside right top
    plot "${reqSecData}" using 2:xtic(1) title "Req/Sec"

    set output "${latencyHistogramFile}"
    set title "Latency (in ms)"
    stats "${latencyData}" using 2 nooutput
    set yrange [0:STATS_max*1.2]
    plot "${latencyData}" using 2:xtic(1) title "Latency"
  `;

  fs.writeFileSync("/tmp/plot.gp", gnuplotScript);
  execSync("gnuplot /tmp/plot.gp");

  return { reqSecHistogramFile, latencyHistogramFile };
};

const moveGeneratedImages = (
  reqSecHistogramFile: string,
  latencyHistogramFile: string
) => {
  if (!fs.existsSync("assets")) {
    fs.mkdirSync("assets");
  }

  fs.renameSync(reqSecHistogramFile, path.join("assets", reqSecHistogramFile));
  fs.renameSync(
    latencyHistogramFile,
    path.join("assets", latencyHistogramFile)
  );
};

const buildResultsTable = (whichBench: number): string => {
  const sortedServers = Object.keys(avgReqSecs).sort(
    (a, b) => avgReqSecs[b] - avgReqSecs[a]
  );
  const lastServer = sortedServers[sortedServers.length - 1];
  const lastServerReqSecs = avgReqSecs[lastServer];

  const query = queries[whichBench].query

  const tableData = [
    ["Server", "Requests/sec", "Latency (ms)", "Relative"],
  ];

  for (const server of sortedServers) {
    const formattedReqSecs = formatNumber(avgReqSecs[server]);
    const formattedLatencies = formatNumber(avgLatencies[server]);

    const relativePerformance = (
      avgReqSecs[server] / lastServerReqSecs
    ).toFixed(2);

    tableData.push([
      serverNames[server],
      `\`${formattedReqSecs}\``,
      `\`${formattedLatencies}\``,
      `\`${relativePerformance}x\``
    ]);
  }

  let resultsTable = ``;
  resultsTable += `Query: \`${query}\`\n\n`;
  resultsTable += markdownTable(tableData);
  return resultsTable;
};

const updateReadme = () => {
  const resultsTable = fs.readFileSync("results.md", "utf8");
  const templateContent = fs.readFileSync("README-Edit-This.md", "utf8");
  const updatedContent = templateContent.replace("$BENCHMARK_TABLE", resultsTable);
  const autoGeneratedComment = "<!-- ⚠️⚠️⚠️ THIS FILE IS AUTO GENERATED DO NOT EDIT DIRECTLY ⚠️⚠️⚠️ -->\n\n";
  fs.writeFileSync("README.md", autoGeneratedComment + updatedContent);
};

const updateResultsMd = (resultsTable: string) => {
  fs.appendFileSync("results.md", resultsTable + "\n");
};

const analyzeBenchmarks = (resultFiles: string[]) => {
  let whichBench = 1;
  if (resultFiles[0].startsWith("bench2")) {
    whichBench = 2;
  } else if (resultFiles[0].startsWith("bench3")) {
    whichBench = 3;
  }

  processResultFiles(resultFiles);

  const { reqSecData, latencyData } = generateGnuplotDataFiles();

  const { reqSecHistogramFile, latencyHistogramFile } = generateGnuplotScript(
    reqSecData,
    latencyData,
    whichBench
  );

  moveGeneratedImages(reqSecHistogramFile, latencyHistogramFile);
  const resultsTable = buildResultsTable(whichBench);
  console.log(resultsTable);
  updateResultsMd(resultsTable);
  updateReadme();
  resultFiles.forEach((file) => fs.unlinkSync(file));
  process.exit(0);
};

export { analyzeBenchmarks };
